@page "/objetivos"

@using GuieMe.Domain.Models;
@using GuieMe.Views.Components
@using GuieMe.Domain.Interfaces;

@inject IObjetivoService _objetivoService;
@inject IUsuarioService _usuarioService;
@inject DialogService DialogService

<div class="header">
    <div class="rz-p-xl-12 rz-text-align-end rz-mb-2 rz-mr-2">
        <AppMenu_component></AppMenu_component>
    </div>

    <div class="rz-p-xl-12 rz-text-align-center rz-mb-2">
        <h2 style="color: #FFF200;">Objetivos</h2>
    </div>
</div>
<div>
    @if (objetivos != null)
    {
        <div class="rz-p-xl-12 rz-text-align-center rz-mb-2">
            <RadzenStack Gap="1rem" Class="rz-my-10 rz-mx-auto" Style="width: 90%;">
                <RadzenLabel Text="@progressoObjetivosConcluidos()" style="color: black;" class="align-text-center" />
                <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Success"
                                   Value="@quantidadeObjetivosConcluidos"
                                   Max="@quantidadeObjetivos"
                                   ShowValue="true" />
            </RadzenStack>
            @foreach (var objetivo in objetivos)
            {
                var progresso = ObjetivoEstaConcluido(objetivo.Id) ? 1 : 0;
                PointStyle point() => progresso == 1 ? PointStyle.Primary : PointStyle.Base;
                string icon() => progresso == 1 ? "check" : "more_horiz";
                string mensagem() => progresso == 1 ? "Concluído" : "Em Andamento";

                <RadzenPanel AllowCollapse="false" Class="rz-my-10 rz-mx-auto" Style="width: 90%;">
                    <RadzenTimeline Orientation="Orientation.Vertical" LinePosition="LinePosition.Center"
                                    style="--rz-timeline-line-width: 36px; max-width: 600px; margin: 0 auto;">
                        <Items>
                            <RadzenTimelineItem PointStyle="@point()">
                                <PointContent><RadzenIcon Icon="@icon()" /></PointContent>
                                <LabelContent>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0 rz-color-primary">@objetivo.Nome</RadzenText>
                                </LabelContent>
                                <ChildContent>
                                    @mensagem()
                                </ChildContent>
                            </RadzenTimelineItem>
                        </Items>
                    </RadzenTimeline>
                    <RadzenText Class="rz-m-0">@objetivo.Descricao</RadzenText>
                </RadzenPanel>
            }
        </div>
        <div class="rz-p-xl-12 rz-text-align-center rz-mb-2">
            <RadzenButton Click=@(args => OnClickGerarCertificado()) 
                Text="Gerar Certificado"
                Icon="aspect_ratio"
                class="rz-border-radius-10 rz-shadow-10" 
                ButtonStyle="ButtonStyle.Warning" 
                Style="background-color: #263A7F; color: #FFF200;" />
            <RadzenButton Click=@(args => OnClickInfoObjetivos()) 
                Icon="help_outline" 
                ButtonStyle="ButtonStyle.Primary"
                class="rz-border-radius-10 rz-shadow-10"
                Style="background-color: #263A7F; color: #FFF200;" />
        </div>
    }
</div>

@code {
    List<Objetivo> objetivos;
    Usuario usuarioLogado;
    int quantidadeObjetivos;
    int quantidadeObjetivosConcluidos;
    bool todosObjetivosConcluidos;

    protected override async Task OnInitializedAsync()
    {
        usuarioLogado = await _usuarioService.GetUsuario();
        objetivos = _objetivoService.GetObjetivos(usuarioLogado.Curso?.Id);
        quantidadeObjetivos = objetivos.Count;
        quantidadeObjetivosConcluidos = usuarioLogado.ObjetivosConcluidos.Count;
        todosObjetivosConcluidos = quantidadeObjetivos == quantidadeObjetivosConcluidos;
    }

    string iconTodosObjetivosConcluidos() 
        => todosObjetivosConcluidos ? "assignment_turned_in" : "assignment_late";

    string progressoObjetivosConcluidos()
        => $"{quantidadeObjetivosConcluidos} / {quantidadeObjetivos}";

    public bool ObjetivoEstaConcluido(int objetivoId)
    {
        return usuarioLogado.ObjetivosConcluidos.Any(x => x.Id == objetivoId);
    }

    public async void OnClickGerarCertificado()
    {
        if(usuarioLogado != null && !string.IsNullOrEmpty(usuarioLogado.RA) && usuarioLogado.TodosObjetivosForamConcluidos == false)
        {
            var mensagem = $@"
    Para gerar o certificado é necessário:<br>
    1- Que o usuário informe os dados pro sistema;<br>
    2- Que o usuário tenha concluido todos os objetivos.";
            await DialogService.Alert(mensagem, "Não foi possivel gerar o certificado!", new AlertOptions() { OkButtonText = "Ok" });
            return;
        }

        var certificadoDados = await _objetivoService.GetDadosCertificado();
        PdfService service = new PdfService();
        service.GerarAbrirCertificadoPDF(certificadoDados);
    }

    public void OnClickInfoObjetivos()
    {
        var mensagem = $@"
    1- Os objetivos so são concluidos ao ler um QR code do local e abrir o aplicativo com o mesmo;<br><br>
    2- Para abrir o aplicativo com o QR code basta scannear o mesmo com a camera do celular, clicar no link lido e em seguida abrir com o aplicativo GuieMe;<br>
        Obs.: Alguns celulares abrem o link no navegador e ficam com o icone do aplicativo no canto superior direito, clicando no icone do aplicativo o mesmo abre o link pelo aplicativo selecionado;<br><br>
    3- Os certificados so são disponibilizados para serem gerados após concluir todos os objetivos;<br><br>
    4- Objetivos são separados por cursos, cada curso tem seus objetivos(locais da universidade a serem conhecidos), por isso é necessario informar seus dados na tela de login local acessado pelo menu;<br><br>
    5- Alguns dados são necessarios para gerar o certificado, como RA, nome e curso que o usuario está realizando na universidade;<br><br>
    6- Para validar o certificado basta levar para o coordenador do seu curso.";
        DialogService.Alert(mensagem, "Objetivos Duvidas", new AlertOptions() { OkButtonText = "Ok" });
    }
}
