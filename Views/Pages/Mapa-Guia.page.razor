@page "/"

@using GuieMe.Domain.Enums;
@using GuieMe.Domain.Helpers;
@using GuieMe.Views.Components;
@using GuieMe.Domain.Interfaces;

@inject ILocalService LocalService
@inject IObjetivoService _objetivoService
@inject DialogService DialogService


<div class="header" style="margin-top: 50px">
    <div class="rz-p-xl-12 rz-text-align-end rz-mb-2 rz-mr-2">
        <AppMenu_component></AppMenu_component>
    </div>

    <div class="rz-p-xl-12 rz-text-align-center rz-mb-2">
        <RadzenDropDown class="rz-border-radius-10" Data="@locaisAcessiveis" TextProperty="Nome" ValueProperty="Id" @bind-Value=@valorSelecionadoLocalPartida AllowClear="true"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Selecione o local de Partida"
                        Change=@(id_Local => SelectLocalPartida(id_Local)) Style="width: 95%; max-width: 400px;">
        </RadzenDropDown>
    </div>

    <div class="rz-p-xl-12 rz-text-align-center rz-mb-5">
        <RadzenDropDown class="rz-border-radius-10" Data="@locaisAcessiveis" TextProperty="Nome" ValueProperty="Id" @bind-Value=@valorSelecionadoLocalDestido AllowClear="true"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Selecione o local de Destino"
                        Change=@(id_Local => SelectLocalDestino(id_Local)) Style="width: 95%; max-width: 400px;">
        </RadzenDropDown>
    </div>

    <div class="rz-p-xl-12 rz-text-align-center rz-mb-2">
        <RadzenButton Click=@(args => OnClickCheckpoint())
                      Text="Checkpoint" Icon="explore"
                      class="rz-border-radius-10 rz-shadow-10"
                      Style="background-color: #FFF200; color: #263A7F; font-size: 11px" />
    </div>

    <div class="rz-p-xl-12 rz-text-align-center">
        <RadzenButton Click=@(async args => await OnClickVoltarCheckpoint())
                      Text="Voltar Checkpoint" Icon="explore"
                      class="rz-border-radius-10 rz-shadow-10"
                      Style="background-color: #FFF200; color: #263A7F; font-size: 11px" />

        <RadzenButton Click=@(args => OnClickInfoCheckpoint())
                      Icon="help_outline"
                      class="rz-border-radius-10 rz-shadow-10"
                      Style="background-color: #FFF200; color: #263A7F;" />
    </div>
</div>

<RadzenAlert AllowClose="false" @bind-Visible="alertChegou" AlertStyle="AlertStyle.Success" Size="AlertSize.Medium" Variant="Variant.Filled" Style=" width: 50%px">
    Você chegou ao seu destino!
</RadzenAlert>

@if (locais != null && locais.Any())
{
    <RadzenTabs Change=@OnChangeAndar @bind-SelectedIndex=@indexAndarAtivo TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Disabled="@dabilitarTab" Text="SubSolo">
                <Mapa_component @ref="mapaSubSolo" locais="@getLocaisAndar(1)" _posicoesRota="@_posicoesRota" usuarios="@usuarios"></Mapa_component>
            </RadzenTabsItem>
            <RadzenTabsItem Disabled="@dabilitarTab" Text="Térreo">
                <Mapa_component @ref="mapaTerreo" locais="@getLocaisAndar(2)" _posicoesRota="@_posicoesRota" usuarios="@usuarios"></Mapa_component>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

@code {
    private Mapa_component mapaSubSolo;
    private Mapa_component mapaTerreo;

    private int indexAndarAtivo = 1;
    private bool alertChegou = false;

    static int tamanhoPosicaoPX { get; set; } = 30;

    int valorSelecionadoLocalPartida;
    int valorSelecionadoLocalDestido;

    List<Local> locaisAcessiveis;
    List<Local> locais;
    List<Andar> andares;

    List<Tuple<int, int>> paredes = new();
    List<Tuple<int, int>> escadas = new();

    public string _posicoesRota { get; set; }

    public int latitudeEscada { get; set; }
    public int longitudeEscada { get; set; }

    public int latitudeDestino { get; set; }
    public int longitudeDestino { get; set; }

    public Usuario usuarios = new();
    public Local localSelecionadoDestino = new();
    public Local localSelecionadoPartida = new();

    public Andar andarPartida = new();
    public Andar andarDestino = new();

    public List<(int latitude, int longitude)> posicoes { get; set; } = new();
    public List<Local> locaisAnteriores { get; set; } = new();

    public Local escadaCheckpoint { get; set; }

    public bool dabilitarTab { get => !string.IsNullOrEmpty(_posicoesRota); }

    protected override async Task OnInitializedAsync()
    {
        _objetivoService.ConcluirObjetivo(Constants.LocalAtualId);
        locais = LocalService.Locais();
        andares = LocalService.Andares();
        locaisAcessiveis = locais.FindAll(local => local.LocalAcessivel == true);

        locaisAnteriores.Add(locais.FirstOrDefault(x => x.Id == 0));
    }

    List<Local> getLocaisAndar(int piso)
    {
        var locaisAndar = locais.Where(x => x.Pisoo == piso).ToList();
        return locaisAndar;
    }

    public void OnClickInfoCheckpoint()
    {
        var mensagem = $@"
    1- O botão de 'CheckPoint' move o ponto atual do usuário para o próximo ponto de referência; <br><br>
    2- O botão de `'Voltar CheckPoint' move o ponto atual do usuário de volta para o ponto de referência anterior.";
        DialogService.Alert(mensagem, "Checkpoint Duvidas", new AlertOptions() { OkButtonText = "Ok" });
    }

    void OnChangeAndar(int index)
    {
        indexAndarAtivo = index;
        ZerarRota();
    }

    public async Task OnClickCheckpoint()
    {
        foreach (var posicao in posicoes)
        {
            foreach (var local in locaisAcessiveis)
            {
                var piso = andares.Find(andar => andar.Pisoo == local.Pisoo);

                if (piso.IndexAndar == indexAndarAtivo)
                {
                    bool latitudeCheckpoint = posicao.latitude == local.LatitudeEntrada
                        || posicao.latitude + 1 == local.LatitudeEntrada
                        || posicao.latitude - 1 == local.LatitudeEntrada;

                    bool longitudeCheckpoint = posicao.longitude == local.LongitudeEntrada
                        || posicao.longitude + 1 == local.LongitudeEntrada
                        || posicao.longitude - 1 == local.LongitudeEntrada;

                    if (latitudeCheckpoint && longitudeCheckpoint)
                    {
                        if (local.Id != valorSelecionadoLocalPartida)
                        {
                            locaisAnteriores.Add(local);

                            usuarios.LatitudeAtual = local.LatitudeEntrada;
                            usuarios.LongitudeAtual = local.LongitudeEntrada;
                            valorSelecionadoLocalPartida = local.Id;

                            if (local.Escada == true && localSelecionadoDestino.Pisoo != usuarios.PisoAtual)
                            {
                                escadaCheckpoint = local;
                                if (localSelecionadoDestino.Pisoo > usuarios.PisoAtual)
                                    await MostrarMensagemEscada("Subir");

                                else
                                    await MostrarMensagemEscada("Descer");
                            }
                            else
                            {
                                SelectLocalPartida(local.Id);
                            }

                            if (usuarios.LatitudeAtual == latitudeDestino && usuarios.LongitudeAtual == longitudeDestino)
                                await VerificaSeChegouAoDestino(usuarios.LatitudeAtual, usuarios.LongitudeAtual);

                            return;
                        }
                    }
                }
            }
        }
    }

    public async Task OnClickVoltarCheckpoint()
    {
        if (!locaisAnteriores.Any()) return;

        var localAnterior = locaisAnteriores.Last();
        var escadaOutroPiso = false;

        if (usuarios.LongitudeAtual == localAnterior.LongitudeEntrada
            && usuarios.LatitudeAtual == localAnterior.LatitudeEntrada
            && usuarios.PisoAtual == localAnterior.Pisoo)
        {
            locaisAnteriores.Remove(localAnterior);
            localAnterior = locaisAnteriores.Last();
        }

        if (localAnterior.Escada == true && localAnterior.Pisoo != usuarios.PisoAtual)
        {
            escadaOutroPiso = true;
            localAnterior = locais.FindLast(o => o.LatitudeEntrada == localAnterior.LatitudeEntrada
                && o.LongitudeEntrada == localAnterior.LongitudeEntrada
                && o.Pisoo == usuarios.PisoAtual);
        }

        if (localAnterior == null) return;

        locaisAnteriores.Remove(locaisAnteriores.Last());
        selecionarLocalCheckpoint(localAnterior);

        if (localAnterior.Escada == false || (localAnterior.Escada == true && localAnterior.Pisoo == usuarios.PisoAtual && escadaOutroPiso == false))
        {
            SelectLocalPartida(localAnterior.Id);
            return;
        }

        var mensagemEscada = locaisAnteriores.Last().Pisoo > localAnterior.Pisoo ? "Subir" : "Descer";
        var result = await DialogService.Confirm("Obs.: Negar está opção irá zerar a rota.", $"{mensagemEscada} escadas?", new Radzen.ConfirmOptions() { OkButtonText = "Sim", CancelButtonText = "Não" });

        if (result.Value == false) return;

        localAnterior = locaisAnteriores.Last();

        selecionarLocalCheckpoint(localAnterior);
        SelectLocalPartida(localAnterior.Id);
    }

    public void SelectLocalPartida(object id_Local, bool trocarAndar = true, bool mostrarMensagemEscada = true)
    {
        ZerarRota();

        if (id_Local != null)
        {
            localSelecionadoPartida = locais.Find(local => local.Id == (int)id_Local);

            if (localSelecionadoPartida != null)
            {
                usuarios.LatitudeAtual = localSelecionadoPartida.LatitudeEntrada;
                usuarios.LongitudeAtual = localSelecionadoPartida.LongitudeEntrada;
                usuarios.PisoAtual = localSelecionadoPartida.Pisoo;
            }

            if (localSelecionadoPartida != null)
            {
                if (trocarAndar)
                {
                    andarPartida = andares.Find(andar => andar.Pisoo == localSelecionadoPartida.Pisoo);
                    OnChangeAndar(andarPartida.IndexAndar);
                }
            }

            if (latitudeDestino != 0 && longitudeDestino != 0)
            {
                if (andarPartida.IndexAndar == indexAndarAtivo)
                    VerificarCaminhoValido(latitudeDestino, longitudeDestino, mostrarMensagemEscada);
            }
        }
    }

    public void SelectLocalDestino(object id_Local, bool selecionadoInput = false)
    {
        ZerarRota();

        if (id_Local != null)
        {
            localSelecionadoDestino = locais.Find(local => local.Id == (int)id_Local);

            if (localSelecionadoDestino != null)
            {
                latitudeDestino = localSelecionadoDestino.LatitudeEntrada;
                longitudeDestino = localSelecionadoDestino.LongitudeEntrada;
            }
            else
            {
                latitudeDestino = 0;
                longitudeDestino = 0;
                ZerarRota();
            }
        }

        if (localSelecionadoDestino != null)
            andarDestino = andares.Find(andar => andar.Pisoo == localSelecionadoDestino.Pisoo);

        if (latitudeDestino != 0 && longitudeDestino != 0)
            VerificarCaminhoValido(latitudeDestino, longitudeDestino, false);
    }

    public async void VerificarCaminhoValido(int latitudeDestino, int longitudeDestino, bool mostrarMensagemEscada)
    {
        ZerarRota();

        var posicaoInicialUsuario = (usuarios.LatitudeAtual, usuarios.LongitudeAtual);
        var destino = (latitudeDestino, longitudeDestino);

        var vizinhosValidos = new HashSet<(int, int)>();
        var posioesAnalisar = new Queue<(int latitude, int longitude)>();
        var posicoesEvizinhosVerificados = new Dictionary<(int, int), (int, int)>();

        posioesAnalisar.Enqueue(posicaoInicialUsuario);

        if (andarDestino.IndexAndar != indexAndarAtivo && !(VerificarEscada(usuarios.LatitudeAtual, usuarios.LongitudeAtual)))
        {
            while (posioesAnalisar.Count > 0)
            {
                var primeiraPosicaoFila = posioesAnalisar.Dequeue();

                if (VerificarEscada(primeiraPosicaoFila.latitude, primeiraPosicaoFila.longitude))
                {
                    latitudeEscada = primeiraPosicaoFila.latitude;
                    longitudeEscada = primeiraPosicaoFila.longitude;

                    var rota = new List<(int latitude, int longitude)>();

                    while (primeiraPosicaoFila != posicaoInicialUsuario)
                    {
                        rota.Add(primeiraPosicaoFila);
                        primeiraPosicaoFila = posicoesEvizinhosVerificados[primeiraPosicaoFila];
                    }
                    rota.Reverse();

                    foreach (var posicao in rota)
                    {
                        posicoes.Add(posicao);
                    }
                    break;
                }

                var vizinhos = new List<(int latitude, int longitude)>
            {
                (primeiraPosicaoFila.latitude + 1, primeiraPosicaoFila.longitude),
                (primeiraPosicaoFila.latitude - 1, primeiraPosicaoFila.longitude),
                (primeiraPosicaoFila.latitude, primeiraPosicaoFila.longitude - 1),
                (primeiraPosicaoFila.latitude, primeiraPosicaoFila.longitude + 1),
            };

                foreach (var vizinho in vizinhos)
                {
                    if (!VerificarParede(vizinho.latitude, vizinho.longitude) && !vizinhosValidos.Contains(vizinho))
                    {
                        vizinhosValidos.Add(vizinho);
                        posioesAnalisar.Enqueue(vizinho);
                        posicoesEvizinhosVerificados[vizinho] = primeiraPosicaoFila;
                    }
                }
            }
        }
        else if (VerificarEscada(usuarios.LatitudeAtual, usuarios.LongitudeAtual) && andarDestino.IndexAndar != indexAndarAtivo)
        {
            if (localSelecionadoDestino.Pisoo > usuarios.PisoAtual && mostrarMensagemEscada)
                await MostrarMensagemEscada("Subir");

            else if (mostrarMensagemEscada)
                await MostrarMensagemEscada("Descer");
        }
        else
        {
            while (posioesAnalisar.Count > 0)
            {
                var primeiraPosicaoFila = posioesAnalisar.Dequeue();

                if (primeiraPosicaoFila == destino)
                {
                    var rota = new List<(int latitude, int longitude)>();

                    while (primeiraPosicaoFila != posicaoInicialUsuario)
                    {
                        rota.Add(primeiraPosicaoFila);
                        primeiraPosicaoFila = posicoesEvizinhosVerificados[primeiraPosicaoFila];
                    }
                    rota.Reverse();

                    foreach (var posicao in rota)
                    {
                        posicoes.Add(posicao);
                    }
                    break;
                }

                var vizinhos = new List<(int latitude, int longitude)>
                {
                    (primeiraPosicaoFila.latitude + 1, primeiraPosicaoFila.longitude),
                    (primeiraPosicaoFila.latitude - 1, primeiraPosicaoFila.longitude),
                    (primeiraPosicaoFila.latitude, primeiraPosicaoFila.longitude - 1),
                    (primeiraPosicaoFila.latitude, primeiraPosicaoFila.longitude + 1),
                };

                foreach (var vizinho in vizinhos)
                {
                    if (!VerificarParede(vizinho.latitude, vizinho.longitude) && !vizinhosValidos.Contains(vizinho))
                    {
                        vizinhosValidos.Add(vizinho);
                        posioesAnalisar.Enqueue(vizinho);
                        posicoesEvizinhosVerificados[vizinho] = primeiraPosicaoFila;
                    }
                }
            }
        }
        GerarRota();
    }

    public bool VerificarParede(int latitude, int longitude)
    {
        if (indexAndarAtivo == 0)
            return mapaSubSolo.paredes.Any(p => p.Item1 == latitude && p.Item2 == longitude);

        else
            return mapaTerreo.paredes.Any(p => p.Item1 == latitude && p.Item2 == longitude);
    }

    public bool VerificarEscada(int latitude, int longitude)
    {
        if (indexAndarAtivo == 0)
            return mapaSubSolo.escadas.Any(p => p.Item1 == latitude && p.Item2 == longitude);

        else
            return mapaTerreo.escadas.Any(p => p.Item1 == latitude && p.Item2 == longitude);
    }

    public void GerarRota()
    {
        var posicoesRota = new List<string>();

        foreach (var posicao in posicoes)
        {
            var latitudePosicaoPX = posicao.latitude * tamanhoPosicaoPX + tamanhoPosicaoPX / 2;
            var longitudePosicaoPX = posicao.longitude * tamanhoPosicaoPX + tamanhoPosicaoPX / 2;

            posicoesRota.Add($"{latitudePosicaoPX},{longitudePosicaoPX}");
        }
        _posicoesRota = string.Join(" ", posicoesRota);
    }

    private async Task MostrarMensagemEscada(string direcao)
    {
        var result = await DialogService.Confirm("Obs.: Negar está opção ira zerar a rota.", $"{direcao} escadas?", new Radzen.ConfirmOptions() { OkButtonText = "Sim", CancelButtonText = "Não" });

        if (result == true)
        {
            var proximoAndar = 0;

            if (direcao == "Subir")
            {
                proximoAndar = localSelecionadoPartida.Pisoo + 1;
                var indexProximoAndar = andares.Find(andar => andar.Pisoo == proximoAndar);

                OnChangeAndar(indexProximoAndar.IndexAndar);

                if (escadaCheckpoint != null)
                {
                    var local = locais.First(x => x.Pisoo == proximoAndar
                        && x.LongitudeEntrada == escadaCheckpoint.LongitudeEntrada
                        && x.LatitudeEntrada == escadaCheckpoint.LatitudeEntrada);

                    valorSelecionadoLocalPartida = local.Id;
                    SelectLocalPartida(local.Id, false, false);
                    escadaCheckpoint = null;
                }
            }
            else
            {
                proximoAndar = localSelecionadoPartida.Pisoo - 1;
                var indexProximoAndar = andares.Find(andar => andar.Pisoo == proximoAndar);

                OnChangeAndar(indexProximoAndar.IndexAndar);

                if (escadaCheckpoint != null)
                {
                    var local = locais.First(x => x.Pisoo == proximoAndar
                        && x.LongitudeEntrada == escadaCheckpoint.LongitudeEntrada
                        && x.LatitudeEntrada == escadaCheckpoint.LatitudeEntrada);

                    valorSelecionadoLocalPartida = local.Id;
                    SelectLocalPartida(local.Id, false, false);
                    escadaCheckpoint = null;
                }
            }
            VerificarCaminhoValido(latitudeDestino, longitudeDestino, false);
        }
        else
        {
            ZerarRota();
        }
    }

    public void ZerarRota()
    {
        posicoes.Clear();
        this._posicoesRota = null;
    }

    private void selecionarLocalCheckpoint(Local local)
    {
        valorSelecionadoLocalPartida = local.Id;
        usuarios.LatitudeAtual = local.LatitudeEntrada;
        usuarios.LongitudeAtual = local.LongitudeEntrada;
    }

    public async Task VerificaSeChegouAoDestino(int latitudeAtual, int longitudeAtual)
    {
        alertChegou = true;
        await Task.Delay(2000);
        alertChegou = false;
    }
}