@page "/"
@using GuieMe.Views.Components;
@using GuieMe.Interfaces;

@inject ILocalService LocalService
@inject DialogService DialogService

<div class="header">
    <div class="rz-p-xl-12 rz-text-align-end rz-mb-2 rz-mr-2">
        <AppMenu_component></AppMenu_component>
    </div>

    <div class="rz-p-xl-12 rz-text-align-center rz-mb-2">
        <RadzenDropDown class="rz-border-radius-10" Data="@locaisAcessiveis" TextProperty="Nome" ValueProperty="Id" @bind-Value=@valorSelecionadoLocalPartida AllowClear="true"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Selecione um local de partida"
                        Change=@(id_Local => SelectLocalPartida(id_Local)) Style="width: 95%; max-width: 400px;">
        </RadzenDropDown>
    </div>

    <div class="rz-p-xl-12 rz-text-align-center rz-mb-5">
        <RadzenDropDown class="rz-border-radius-10" Data="@locaisAcessiveis" TextProperty="Nome" ValueProperty="Id" @bind-Value=@valorSelecionadoLocalDestido AllowClear="true"
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Placeholder="Selecione um local de destino"
                        Change=@(id_Local => SelectLocalDestino(id_Local)) Style="width: 95%; max-width: 400px;">
        </RadzenDropDown>
    </div>

    <div class="rz-p-xl-12 rz-text-align-center rz-mb-2">
        <RadzenButton Click=@(args => OnClickCheckpoint()) Text="Checkpoint" Icon="explore" class="rz-border-radius-10 rz-shadow-10" ButtonStyle="ButtonStyle.Warning" Style="background-color: #FFF200; color: #263A7F;" />
    </div>
    <div class="rz-p-xl-12 rz-text-align-center">
        <RadzenButton Click=@(args => OnClickVoltarCheckpoint()) Text="Voltar Checkpoint" Icon="explore" class="rz-border-radius-10 rz-shadow-10" ButtonStyle="ButtonStyle.Warning" Style="background-color: #FFF200; color: #263A7F;" />
    </div>
</div>
<div class="mapa-container">
    <svg>
        <polyline points="@_posicoesRota" class="rota" />
    </svg>

    <div class="mapa">
        @foreach (var longitude in Enumerable.Range(0, qtdLinhas))
        {
            @foreach (var latitude in Enumerable.Range(0, qtdColunas))
            {
                var posicao = $"{latitude}, {longitude}"; //momentaneo
                var tipo = "";

                @foreach (var local in locais)
                {
                    if (local.LatitudeEntrada == latitude && local.LongitudeEntrada == longitude)
                    {
                        tipo = "entrada";
                        <div class="loc_entrada" data-text="@local.Nome" style="left: @(latitude * tamanhoPosicaoPX - (tamanhoPosicaoPX/6))px;
                            top: @(longitude * tamanhoPosicaoPX - (tamanhoPosicaoPX / 2) - (tamanhoPosicaoPX/6))px;"></div>
                    }
                    else
                    {
                        if ((latitude == local.LatitudeMin || latitude == local.LatitudeMax) && (longitude >= local.LongitudeMin && longitude <= local.LongitudeMax) ||
                            (latitude >= local.LatitudeMin && latitude <= local.LatitudeMax) && (longitude == local.LongitudeMin || longitude == local.LongitudeMax))
                        {
                            tipo = "parede";
                            paredes.Add(new Tuple<int, int>(latitude, longitude));
                        }
                    }
                }
                <div class="posicao @tipo"> @posicao </div>
            }
        }
        <div class="pontoAtualUsuario" style="left: @(usuarios.LatitudeAtual * tamanhoPosicaoPX - (tamanhoPosicaoPX/6))px;
                                        top: @(usuarios.LongitudeAtual * tamanhoPosicaoPX - (tamanhoPosicaoPX / 2) - (tamanhoPosicaoPX/6))px;"></div>
    </div>
</div>

<style>
    .mapa {
        display: grid;
        grid-template-columns: repeat(@qtdColunas, @(tamanhoPosicaoPX)px);
        grid-template-rows: repeat(@qtdLinhas, @(tamanhoPosicaoPX)px);
        position: absolute;
        transform: translate(@(usuarios.LatitudeAtual * -tamanhoPosicaoPX + larguraTela / 2)px, @(usuarios.LongitudeAtual * -tamanhoPosicaoPX + alturaTela / 2)px);
        margin: 10vh 10vw;
        padding-right: 45vw;
        z-index: 1;
    }

    svg {
        width: @(tamanhoPosicaoPX * qtdColunas)px;
        height: @(tamanhoPosicaoPX * qtdLinhas)px;
        position: absolute;
        transform: translate(@(usuarios.LatitudeAtual * -tamanhoPosicaoPX + larguraTela / 2)px, @(usuarios.LongitudeAtual * -tamanhoPosicaoPX + alturaTela / 2)px);
        margin: 10vh 10vw;
        z-index: 2;
    }
</style>

@code {
    static int qtdColunas { get; set; } = 30;
    static int qtdLinhas { get; set; } = 15;

    static int tamanhoPosicaoPX { get; set; } = 30; //50

    static int larguraTela { get; set; } = 400; //deixar dinamico - pega o tamanho da tela
    static int alturaTela { get; set; } = 300; //deixar dinamico

    int valorSelecionadoLocalPartida;
    int valorSelecionadoLocalDestido;


    List<Local> locaisAcessiveis;
    List<Local> locais;
    List<Tuple<int, int>> paredes;

    public string _posicoesRota { get; set; }

    public int latitudePartida { get; set; }
    public int longitudePartida { get; set; }

    public int latitudeDestino { get; set; }
    public int longitudeDestino { get; set; }

    public Usuario usuarios = new Usuario();
    public Local localSelecionadoDestino = new Local();
    public Local localSelecionadoPartida = new Local();

    public List<(int latitude, int longitude)> posicoes { get; set; } = new List<(int, int)>();
    public List<(int latitude, int longitude)> posicoesAnterior { get; set; } = new List<(int, int)>();

    protected override async Task OnInitializedAsync()
    {
        locais = LocalService.Locais();
        locaisAcessiveis = locais.FindAll(local => local.LocalAcessivel == true);
        paredes = LocalService.Paredes();

        if (posicoes.Count > 0)
        {
            await VerificaSeChegouAoDestino(usuarios.LatitudeAtual, usuarios.LongitudeAtual);
        }

        //StateHasChanged(); notifica o componente para atualizar a interface com as alterações mais recentes.
    }

    public void OnClickCheckpoint()
    {
        foreach (var posicao in posicoes)
        {
            foreach(var local in locaisAcessiveis)
            {
                bool latitudeCheckpoint = posicao.latitude == local.LatitudeEntrada
                    || posicao.latitude + 1 == local.LatitudeEntrada
                    || posicao.latitude - 1 == local.LatitudeEntrada;

                bool longitudeCheckpoint = posicao.longitude == local.LongitudeEntrada
                    || posicao.longitude + 1 == local.LongitudeEntrada
                    || posicao.longitude - 1 == local.LongitudeEntrada;

                if (latitudeCheckpoint && longitudeCheckpoint)
                {
                    if (local.Id != valorSelecionadoLocalPartida)
                    {
                        posicoesAnterior.Add((usuarios.LongitudeAtual, usuarios.LatitudeAtual));
                        usuarios.LongitudeAtual = local.LongitudeEntrada;
                        usuarios.LatitudeAtual = local.LatitudeEntrada;
                        valorSelecionadoLocalPartida = local.Id;
                        SelectLocalPartida(local.Id);
                        return;
                    }
                }
            }
        }
    }
    public void OnClickVoltarCheckpoint()
    {
        if (posicoesAnterior.Count > 0)
        {            
            var posicaoAnterior = posicoesAnterior.FindLast(o => o.latitude != null);
            var localAnterior = locaisAcessiveis.Find(o => o.LatitudeEntrada == posicaoAnterior.latitude
                    && o.LongitudeEntrada == posicaoAnterior.longitude);
            if (localAnterior != null)
            {
                posicoesAnterior.Remove(posicaoAnterior);
                usuarios.LongitudeAtual = posicaoAnterior.longitude;
                usuarios.LatitudeAtual = posicaoAnterior.latitude;
                valorSelecionadoLocalPartida = localAnterior.Id;
                SelectLocalPartida(localAnterior.Id);
            }
        }
    }

    public void SelectLocalPartida(object id_Local)
    {
        if (id_Local != null)
        {
            localSelecionadoPartida = locais.Find(local => local.Id == (int)id_Local);

            if (localSelecionadoPartida != null)
            {
                latitudePartida = localSelecionadoPartida.LatitudeEntrada;
                longitudePartida = localSelecionadoPartida.LongitudeEntrada;

                usuarios.LatitudeAtual = localSelecionadoPartida.LatitudeEntrada;
                usuarios.LongitudeAtual = localSelecionadoPartida.LongitudeEntrada;
            }

            if (latitudeDestino != 0 && longitudeDestino != 0)
            {
                VerificarCaminhoValido(latitudeDestino, longitudeDestino);
            }
        }
    }

    public void SelectLocalDestino(object id_Local)
    {
        if (id_Local != null)
        {
            localSelecionadoDestino = locais.Find(local => local.Id == (int)id_Local);

            if (localSelecionadoDestino != null)
            {
                latitudeDestino = localSelecionadoDestino.LatitudeEntrada;
                longitudeDestino = localSelecionadoDestino.LongitudeEntrada;
            }
            else
            {
                latitudeDestino = 0;
                longitudeDestino = 0;

                ZerarRota();
            }
        }

        if (latitudeDestino != 0 && longitudeDestino != 0)
        {
            VerificarCaminhoValido(latitudeDestino, longitudeDestino);
        }
    }

    public void VerificarCaminhoValido(int latitudeDestino, int longitudeDestino)
    {
        ZerarRota();

        var posicaoInicialUsuario = (0, 0); /*ver se deixo 0 mesmo*/

        if (localSelecionadoPartida != null)
        {
            if (localSelecionadoPartida.Id != 0)
            {
                posicaoInicialUsuario = (latitudePartida, longitudePartida);
                usuarios.LatitudeAtual = latitudePartida;
                usuarios.LongitudeAtual = longitudePartida;            
            }
            else
            {
                posicaoInicialUsuario = (usuarios.LatitudeAtual, usuarios.LongitudeAtual);
            }
        }
        else
        {
            posicaoInicialUsuario = (usuarios.LatitudeAtual, usuarios.LongitudeAtual);
        }

        var destino = (latitudeDestino, longitudeDestino);

        var vizinhosValidos = new HashSet<(int, int)>(); //HashSet: não permite elementos repitidos na lista
        var posioesAnalisar = new Queue<(int latitude, int longitude)>(); //Queue: fila, os elementos entram e saem em uma ordem especifica
        var posicoesEvizinhosVerificados = new Dictionary<(int, int), (int, int)>(); //Dictionary: armazena chave-valor

        posioesAnalisar.Enqueue(posicaoInicialUsuario); //Enqueue: adiciona um elemento ao final da fila(Queue)

        while (posioesAnalisar.Count > 0)
        {
            var primeiraPosicaoFila = posioesAnalisar.Dequeue(); //Dequeue: remove e retorna o primeiro elemento(que entrou) da fila(Queue)

            if (primeiraPosicaoFila == destino)
            {
                var rota = new List<(int latitude, int longitude)>();

                while (primeiraPosicaoFila != posicaoInicialUsuario)
                {
                    rota.Add(primeiraPosicaoFila);
                    primeiraPosicaoFila = posicoesEvizinhosVerificados[primeiraPosicaoFila]; //atualiza primeiraPosicao == indice da primeiraPosicao
                }
                rota.Reverse();

                foreach (var posicao in rota)
                {
                    posicoes.Add(posicao);
                }
                break;
            }

            var vizinhos = new List<(int latitude, int longitude)>
            {
                (primeiraPosicaoFila.latitude + 1, primeiraPosicaoFila.longitude),
                (primeiraPosicaoFila.latitude - 1, primeiraPosicaoFila.longitude),
                (primeiraPosicaoFila.latitude, primeiraPosicaoFila.longitude - 1),
                (primeiraPosicaoFila.latitude, primeiraPosicaoFila.longitude + 1),
            };

            foreach (var vizinho in vizinhos)
            {
                if (!VerificarParede(vizinho.latitude, vizinho.longitude) && !vizinhosValidos.Contains(vizinho))
                {
                    vizinhosValidos.Add(vizinho);
                    posioesAnalisar.Enqueue(vizinho);
                    posicoesEvizinhosVerificados[vizinho] = primeiraPosicaoFila; //chave-valor == vizinho-posicaoAnalisada
                }
            }
        }

        GerarRota();
    }

    public bool VerificarParede(int latitude, int longitude)
    {
        return paredes.Any(p => p.Item1 == latitude && p.Item2 == longitude); //Any: vê se pelo menos um é igual
    }

    public void GerarRota()
    {
        var posicoesRota = new List<string>();

        foreach (var posicao in posicoes)
        {
            var latitudePosicaoPX = posicao.latitude * tamanhoPosicaoPX + tamanhoPosicaoPX / 2;
            var longitudePosicaoPX = posicao.longitude * tamanhoPosicaoPX + tamanhoPosicaoPX / 2;

            posicoesRota.Add($"{latitudePosicaoPX},{longitudePosicaoPX}");
        }
        _posicoesRota = string.Join(" ", posicoesRota);
    }

    public async Task VerificaSeChegouAoDestino(int latitudeAtual, int longitudeAtual)
    {
        VerificarCaminhoValido(latitudeDestino, longitudeDestino);

        if (latitudeAtual == latitudeDestino && longitudeAtual == longitudeDestino)
        {
            await MostrarModal();
        }
    }

    protected async Task MostrarModal()
    {
        await DialogService.OpenSideAsync<Views.Components.ModalChegada_component>("", options: new SideDialogOptions
            {
                CloseDialogOnOverlayClick = true,
                Position = DialogPosition.Bottom,
                ShowMask = true,
                CssClass = "modal-css"
            });
    }

    public void ZerarRota()
    {
        posicoes.Clear();
        _posicoesRota = null;
    }
}